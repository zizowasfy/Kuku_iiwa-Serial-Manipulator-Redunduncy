clear all; clc; close all;
% In this Code: direction signs are inverted since the robot reference is
% not as the convention.
% Clockwise -> (+ve) and Anti-Clockwise -> (-ve)
%% Robot 
L = 1 ;
T_base = eye(4) ;
q = [deg2rad(0), deg2rad(90), deg2rad(90), deg2rad(-90)];
% Forward Kinematics 
FK = localFK(q,L);
% Jacobian
Jacobian = Jacob(T_base, FK, q, L);
W = eye(4) ;
% RObot Visualization
% figure
% robot(L,q)
%

%% PsuedoInverse
q = [deg2rad(90), deg2rad(0), deg2rad(0), deg2rad(90)];        % Desired Position in Joint Space
FK = localFK(q,L);
final_pos = FK(1:2,4); % [x,y]  position in x,y plane
final_ori = atan2(FK(2,1), FK(1,1)); % [phi] orientation around z
final = [final_pos', final_ori];

q = [deg2rad(5), deg2rad(30), deg2rad(0), deg2rad(0)]';          % Initial Position in Joint Space
FK = localFK(q,L);
initial_pos = FK(1:2,4);
initial_ori = atan2(FK(2,1), FK(1,1));
initial = [initial_pos', initial_ori];
Jacobian = Jacob(T_base, FK, q, L);

current = initial;

%%%%%%%%%%
% PseudoInverse(final, current, Jacobian, q, L)
%%%%%%%%%%

%% Weighted 

W = diag([2, 2, 1, 2]);

%%%%%%%%%%%%%%  Defining the Final desired position and current Initial configuration

q = [deg2rad(90), deg2rad(-90), deg2rad(90), deg2rad(90)];        % Desired Position in Joint Space
FK = localFK(q,L);
final_pos = FK(1:2,4); % [x,y]  position in x,y plane
final_ori = atan2(FK(2,1), FK(1,1)); % [phi] orientation around z
final = [final_pos', final_ori];                                  % Desired Position in Task Space

q = [deg2rad(10), deg2rad(0), deg2rad(0), deg2rad(-90)]';         % Initial Position in Joint Space
FK = localFK(q,L);
initial_pos = FK(1:2,4);
initial_ori = atan2(FK(2,1), FK(1,1));
initial = [initial_pos', initial_ori];
Jacobian = Jacob(T_base, FK, q, L);

current = initial;


%%%%%%%%%%
% WeightedPseudoInverse(final, current, Jacobian, q, L, W)
%%%%%%%%%%

%% Damped Least Square (DLS)

myo = 1.5 ;
 
%%%%%%%%%%%%%%  Defining the Final desired position and current Initial configuration

q = [deg2rad(90), deg2rad(0), deg2rad(0), deg2rad(45)];        % Desired Position in Joint Space
FK = localFK(q,L);
final_pos = FK(1:2,4); % [x,y]  position in x,y plane
final_ori = atan2(FK(2,1), FK(1,1)); % [phi] orientation around z
final = [final_pos', final_ori]                                % Desired Position in Task Space

q = [deg2rad(5), deg2rad(0), deg2rad(0), deg2rad(0)]';         % Initial Position in Joint Space
FK = localFK(q,L);
initial_pos = FK(1:2,4);
initial_ori = atan2(FK(2,1), FK(1,1));
initial = [initial_pos', initial_ori]
Jacobian = Jacob(T_base, FK, q, L)

current = initial;

%%%%%%%%%%
% DampedLeastSquares(final, current, Jacobian, q, L, myo)
%%%%%%%%%%

%% Task Priority Augmentation  Task1- Square Path , Task2- Vertical Last Link 

%%%%%%%%%%%%%%  Defining the Final desired position and current Initial configuration

q = [deg2rad(170), deg2rad(0), deg2rad(-30), deg2rad(0)];           % Desired Position in Joint Space
FK = localFK(q,L);
final_pos = FK(1:2,4); % [x,y]  position in x,y plane
final_ori = atan2(FK(2,1), FK(1,1)); % [phi] orientation around z
final = [final_pos', final_ori];                                    % Desired Position in Task Space

q = [deg2rad(0), deg2rad(90), deg2rad(90), deg2rad(-90)]';          % Initial Position in Joint Space
FK = localFK(q,L);
initial_pos = FK(1:2,4);
initial_ori = atan2(FK(2,1), FK(1,1));
initial = [initial_pos', initial_ori];
Jacobian = Jacob(T_base, FK, q, L);

current = initial;

% Square path         
[xs,ys,dim,n] = deal(current(1), current(2), 1, 10); %(start x,start y, square's side length, number of points)
[xsq,ysq] = generateSquare(xs,ys,dim,n);

%%%%%%%%%%
TaskAugmentation(current, Jacobian, q, L, xsq, ysq, n)
%%%%%%%%%%
